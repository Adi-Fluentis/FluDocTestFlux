name: Update Project Progress

on:
  issues:
    types: [edited]

concurrency:
  group: auto-close-update-project-progress
  cancel-in-progress: true

jobs:
  update_project_and_close_issue:
    if: contains(github.event.issue.labels.*.name, 'review')
    runs-on: ubuntu-latest
    steps:
      - name: Update Progress Field & Move to Done
        uses: actions/github-script@v7
        with:
          # github-token: ${{ secrets.GITHUB_TOKEN }}
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const issue = context.payload.issue;
            const issueNumber = issue.number;
            const issueBody = issue.body;
            const repo = context.repo;
            const owner = repo.owner;
            const repoName = repo.repo;

            console.log("🔹 Issue Number:", issueNumber);

            // Count total checkboxes and completed ones
            const allCheckboxes = issueBody.match(/- \[[ x]\]/g) || [];
            const completedCheckboxes = issueBody.match(/- \[x\]/g) || [];

            console.log("✅ Total Checkboxes Found:", allCheckboxes.length);
            console.log("✅ Completed Checkboxes:", completedCheckboxes.length);

            const progress = allCheckboxes.length > 0 
                ? Math.round((completedCheckboxes.length / allCheckboxes.length) * 100)
                : 0;

            console.log("📊 Progress Calculated:", progress, "%");

            // Fetch all projects linked to this issue
            const projectsResponse = await github.graphql(`
            query($owner: String!, $repo: String!, $issueNumber: Int!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issueNumber) {
                  projectItems(first: 1) {
                    nodes {
                      id
                      project {
                        id
                        title
                      }
                    }
                  }
                }
              }
            }
            `, { owner, repo: repoName, issueNumber });

            console.log("📌 Full Projects V2 Response:", JSON.stringify(projectsResponse, null, 2));

            const projectItems = projectsResponse.repository.issue.projectItems.nodes;
            if (projectItems.length === 0) {
              console.log("❌ No project found for this issue.");
              return;
            }

            const projectId = projectItems[0].project.id;
            const itemId = projectItems[0].id;

            console.log("✅ Found Project:", projectItems[0].project.title);
            console.log("🔹 Project ID:", projectId);
            console.log("🔹 Project Item ID:", itemId);

            const fieldsResponse = await github.graphql(`
            query($projectId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  fields(first: 20) {  # Increased to 20 to retrieve all fields
                    nodes {
                      __typename  # Helps us determine field type at runtime

                      # Common fields (for fields with name & ID)
                      ... on ProjectV2FieldCommon {
                        id
                        name
                      }

                      # Single-select fields (e.g., "Status")
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }

                      # Number fields (e.g., "Progress")
                      ... on ProjectV2IterationField {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
            `, { projectId });

            // Variables to store field IDs
            let progressFieldId = null;
            let statusFieldId = null;
            let doneStatusValueId = null;

            // Process retrieved fields
            fieldsResponse.node.fields.nodes.forEach(field => {
              console.log(`🔹 Found Field: ${field.name} (Type: ${field.__typename})`);

              // Identify "Progress" field
              if (field.__typename === "ProjectV2Field" && field.name === "Progress") {
                progressFieldId = field.id;
              }

              // Identify "Status" field
              if (field.__typename === "ProjectV2SingleSelectField" && field.name === "Status") {
                statusFieldId = field.id;

                // Find "Done" status option
                field.options.forEach(option => {
                  if (option.name === "Done") {
                    doneStatusValueId = option.id;
                  }
                });
              }
            });

            // Debugging output
            console.log("✅ Progress Field ID:", progressFieldId);
            console.log("✅ Status Field ID:", statusFieldId);
            console.log("✅ Done Status Value ID:", doneStatusValueId);


            // Update the Progress field
            await github.graphql(`
              mutation($projectId: ID!, $itemId: ID!, $progressFieldId: ID!, $progress: String!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: $projectId,
                  itemId: $itemId,
                  fieldId: $progressFieldId,
                  value: { text: $progress }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `, { projectId, itemId, progressFieldId, progress: `${progress}%` });

            console.log("✅ Progress field updated.");

            // Move to Done and close if progress is 100%
            if (progress === 100) {
              await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $statusFieldId: ID!, $doneStatusValueId: ID!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $statusFieldId,
                    value: { singleSelectOptionId: $doneStatusValueId }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `, { projectId, itemId, statusFieldId, doneStatusValueId });

              console.log("✅ Moved to Done in project.");

              // Close the GitHub Issue
              await github.rest.issues.update({
                owner,
                repo: repoName,
                issue_number: issueNumber,
                state: "closed"
              });

              console.log("✅ Issue closed.");
            }
