name: Update Project Fields

on:
 workflow_dispatch: # Manual trigger

jobs:
  update_project_fields:
    runs-on: ubuntu-latest
    steps:
      - name: Debug GitHub Token Permissions
        run: |
          curl -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/orgs/Adi-Fluentis/projects

      - name: Update Progress, Weight & Completed Weight
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const repo = context.repo;
            const owner = repo.owner;
            const repoName = repo.repo;

            console.log("🔹 Fetching all issues in the project...");

            // Fetch the project and all issues
            const projectsResponse = await github.graphql(`
            query($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                projectV2(number: 1) {  
                  items(first: 50) {   
                    nodes {
                      id
                      content {
                        ... on Issue {
                          number
                          title
                          body
                        }
                      }
                    }
                  }
                }
              }
            }`, { owner, repo: repoName });

            const projectItems = projectsResponse.repository?.projectV2?.items?.nodes || [];

            if (projectItems.length === 0) {
              console.log("❌ No issues found in the project.");
              return;
            }

            console.log(`✅ Found ${projectItems.length} issues. Processing...`);

            // Loop through each issue in the project
            for (const item of projectItems) {
              const issue = item.content;

              if (!issue || !issue.body) {
                console.log(`❌ Skipping Issue #${issue?.number || "Unknown"} - No content.`);
                continue;
              }

              console.log(`🔹 Processing Issue #${issue.number}: ${issue.title}`);

              // Extract estimated word count
              const wordCountMatch = issueBody.match(/📊 \*\*Estimated Word Count:\*\* (\d+)/);
              const totalWords = wordCountMatch ? parseInt(wordCountMatch[1], 10) : 0;

              if (totalWords === 0) {
                console.log("❌ No word count found, skipping update.");
                return;
              }

              console.log("📊 Total Words in Issue:", totalWords);

              // Find completed tasks and sum words
              let completedWords = 0;
              const allTasks = issueBody.match(/- \[[ x]\] \*\*(.*?)\*\* \| (\d+)/g) || [];

              allTasks.forEach(task => {
                const match = task.match(/- \[x\] \*\*(.*?)\*\* \| (\d+)/);
                if (match) {
                  completedWords += parseInt(match[2], 10);
                }
              });

              console.log("✅ Completed Words:", completedWords);

              // Compute percentage
              const progressPercent = totalWords > 0 ? Math.round((completedWords / totalWords) * 100) : 0;
              console.log("📊 Progress Calculated:", progressPercent, "%");


