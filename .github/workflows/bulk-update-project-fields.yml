name: Update Project Fields

on:
  issues:
    types: [edited]

jobs:
  update_project_fields:
    runs-on: ubuntu-latest
    steps:
      - name: Debug GitHub Token Permissions
        run: |
          curl -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/orgs/Adi-Fluentis/projects

      - name: Update Progress, Weight & Completed Weight
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const issue = context.payload.issue;
            const repo = context.repo;
            const owner = repo.owner;
            const repoName = repo.repo;
            const issueNumber = issue.number;
            const issueBody = issue.body;

            console.log("🔹 Issue Number:", issueNumber);
            
            // Extract estimated word count from issue body
            const wordCountMatch = issueBody.match(/Estimated Word Count:\s*([\d,]+)/);
            const totalWords = wordCountMatch ? parseInt(wordCountMatch[1].replace(/,/g, ''), 10) : null;
            
            if (!totalWords) {
              console.log("❌ No word count found, skipping update.");
              return;
            }

            console.log("📊 Total Words in Issue:", totalWords);

            // Find completed tasks and sum words
            let completedWords = 0;
            const allCheckboxes = issueBody.match(/- \[[ x]\] \*\*(.*?)\*\* \(([\d,]+) words\)/g) || [];
            
            allCheckboxes.forEach(line => {
              if (line.includes("- [x]")) {
                const wordMatch = line.match(/\(([\d,]+) words\)/);
                if (wordMatch) {
                  completedWords += parseInt(wordMatch[1].replace(/,/g, ''), 10);
                }
              }
            });

            console.log("✅ Completed Words:", completedWords);

            // Compute percentage
            const progressPercent = totalWords > 0 ? Math.round((completedWords / totalWords) * 100) : 0;
            console.log("📊 Progress Calculated:", progressPercent, "%");

            // Fetch the project linked to the issue
            const projectsResponse = await github.graphql(`
            query($owner: String!, $repo: String!, $issueNumber: Int!) {
              repository(owner: $owner, name: $repo) {
                issue(number: $issueNumber) {
                  projectItems(first: 1) {
                    nodes {
                      id
                      project {
                        id
                        title
                      }
                    }
                  }
                }
              }
            }`, { owner, repo: repoName, issueNumber });

            const projectItems = projectsResponse.repository.issue.projectItems.nodes;
            if (projectItems.length === 0) {
              console.log("❌ No project found for this issue.");
              return;
            }

            const projectId = projectItems[0].project.id;
            const itemId = projectItems[0].id;

            console.log("✅ Found Project:", projectItems[0].project.title);
            console.log("🔹 Project ID:", projectId);
            console.log("🔹 Project Item ID:", itemId);

            // Fetch fields including Weight & Completed Weight
            const fieldsResponse = await github.graphql(`
            query($projectId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      __typename
                      ... on ProjectV2FieldCommon {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }`, { projectId });

            let weightFieldId = null;
            let completedWeightFieldId = null;
            let progressFieldId = null;

            fieldsResponse.node.fields.nodes.forEach(field => {
              console.log(`🔹 Found Field: ${field.name} (Type: ${field.__typename})`);

              if (field.name === "Weight") weightFieldId = field.id;
              if (field.name === "Completed Weight") completedWeightFieldId = field.id;
              if (field.name === "Progress") progressFieldId = field.id;
            });

            console.log("✅ Weight Field ID:", weightFieldId);
            console.log("✅ Completed Weight Field ID:", completedWeightFieldId);
            console.log("✅ Progress Field ID:", progressFieldId);

            // Update Weight field
            await github.graphql(`
            mutation($projectId: ID!, $itemId: ID!, $weightFieldId: ID!, $totalWords: Float!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId,
                itemId: $itemId,
                fieldId: $weightFieldId,
                value: { number: $totalWords }
              }) {
                projectV2Item {
                  id
                }
              }
            }`, { projectId, itemId, weightFieldId, totalWords });

            console.log("✅ Weight field updated.");

            // Update Completed Weight field
            await github.graphql(`
            mutation($projectId: ID!, $itemId: ID!, $completedWeightFieldId: ID!, $completedWords: Float!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId,
                itemId: $itemId,
                fieldId: $completedWeightFieldId,
                value: { number: $completedWords }
              }) {
                projectV2Item {
                  id
                }
              }
            }`, { projectId, itemId, completedWeightFieldId, completedWords });

            console.log("✅ Completed Weight field updated.");

            // Update Progress field
            await github.graphql(`
            mutation($projectId: ID!, $itemId: ID!, $progressFieldId: ID!, $progressPercent: Float!) {
              updateProjectV2ItemFieldValue(input: {
                projectId: $projectId,
                itemId: $itemId,
                fieldId: $progressFieldId,
                value: { number: $progressPercent }
              }) {
                projectV2Item {
                  id
                }
              }
            }`, { projectId, itemId, progressFieldId, progressPercent });

            console.log("✅ Progress field updated.");
