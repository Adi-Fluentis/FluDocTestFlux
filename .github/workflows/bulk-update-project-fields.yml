name: Update Project Fields

on:
 workflow_dispatch: # Manual trigger

jobs:
  update_project_fields:
    runs-on: ubuntu-latest
    steps:
      - name: Debug GitHub Token Permissions
        run: |
          curl -H "Authorization: Bearer ${{ secrets.GH_PAT }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/orgs/Adi-Fluentis/projects

      - name: Update Progress, Weight & Completed Weight
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PAT }}
          script: |
            const repo = context.repo;
            const owner = repo.owner;
            const repoName = repo.repo;

            console.log("🔹 Fetching all issues in the project...");

            // Fetch the project and all issues
            const projectsResponse = await github.graphql(`
            query($owner: String!, $repo: String!) {
              repository(owner: $owner, name: $repo) {
                projectV2(number: 1) {  
                  id  # ✅ Ensure the project ID is fetched
                  items(first: 50) {   
                    nodes {
                      id
                      content {
                        ... on Issue {
                          number
                          title
                          body
                        }
                      }
                    }
                  }
                }
              }
            }`, { owner, repo: repoName });

            // ✅ Extract Project ID from the GraphQL response
            const projectId = projectsResponse.repository?.projectV2?.id;

            if (!projectId) {
                console.log("❌ Project ID not found in response. Skipping update.");
                return;
            }

            console.log("✅ Found Project ID:", projectId);

            const projectItems = projectsResponse.repository?.projectV2?.items?.nodes || [];

            if (projectItems.length === 0) {
              console.log("❌ No issues found in the project.");
              return;
            }

            console.log(`✅ Found ${projectItems.length} issues. Processing...`);

            // ✅ Step 1: Fetch Project Fields
            const fieldsResponse = await github.graphql(`
            query($projectId: ID!) {
              node(id: $projectId) {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      __typename
                      ... on ProjectV2FieldCommon {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }`, { projectId });

            console.log("📌 Full Fields Response:", JSON.stringify(fieldsResponse, null, 2));

            // ✅ Step 2: Extract Field IDs
            let weightFieldId = null;
            let completedWeightFieldId = null;
            let progressFieldId = null;

            fieldsResponse.node.fields.nodes.forEach(field => {
                console.log(`🔹 Found Field: ${field.name} (Type: ${field.__typename})`);
                if (field.name === "Weight") weightFieldId = field.id;
                if (field.name === "Completed Weight") completedWeightFieldId = field.id;
                if (field.name === "Progress") progressFieldId = field.id;
            });

            console.log("✅ Weight Field ID:", weightFieldId);
            console.log("✅ Completed Weight Field ID:", completedWeightFieldId);
            console.log("✅ Progress Field ID:", progressFieldId);

            // ✅ Step 3: Ensure we have valid field IDs before updating
            if (!weightFieldId || !completedWeightFieldId || !progressFieldId) {
                console.log("❌ One or more field IDs are missing. Skipping update.");
                return;
            }

            // Loop through each issue in the project
            for (const item of projectItems) {
                const issue = item.content;
                const itemId = item?.id;

                if (!itemId) {
                    console.log("❌ itemId is not defined for issue:", issue.number);
                    continue;
                }

                if (!issue || !issue.body) {
                    console.log(`❌ Skipping Issue #${issue?.number || "Unknown"} - No content.`);
                    continue;
                }

                console.log(`🔹 Processing Issue #${issue.number}: ${issue.title}`);

                // Print the full issue body for debugging
                console.log("📜 Issue Body:", issue.body);

                // Extract estimated word count
                const wordCountMatch = issue.body.match(/\*\*\s*Estimated Word Count\s*\*\*:\s*(\d+)/);

                console.log("🕵️‍♂️ Debug: Word Count Match Result:", wordCountMatch);

                const totalWords = wordCountMatch ? parseInt(wordCountMatch[1], 10) : 0;

                if (totalWords === 0) {
                    console.log("❌ No word count found, skipping update.");
                    continue;
                }

                console.log("📊 Total Words in Issue:", totalWords);

                // Find completed tasks and sum words
                let completedWords = 0;
                const allTasks = issue.body.match(/- \[[x]\] (.*?) \| (\d+)/g) || [];

                console.log("🔎 Debug: Matched Completed Tasks:", allTasks);

                allTasks.forEach(task => {
                    console.log("🛠 Parsing Task:", task);
                    const match = task.match(/- \[[x]\] .*? \| (\d+)/);
                    if (match) {
                        console.log("✅ Matched Word Count:", match[1]);
                        completedWords += parseInt(match[1], 10);
                    }
                });

                console.log("✅ Completed Words:", completedWords);

                // Compute percentage
                const progressPercent = totalWords > 0 ? Math.round((completedWords / totalWords) * 100) : 0;
                console.log("📊 Progress Calculated:", progressPercent, "%");

                // ✅ Step 4: Update the Weight (Total Word Count)
                await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Float!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { number: $value }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }`, { projectId, itemId, fieldId: weightFieldId, value: totalWords });

                console.log("✅ Weight field updated.");

                // ✅ Step 5: Update the Completed Weight (Completed Words)
                await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Float!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { number: $value }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }`, { projectId, itemId, fieldId: completedWeightFieldId, value: completedWords });

                console.log("✅ Completed Weight field updated.");

                // ✅ Step 6: Update the Progress Field (Percentage Completed)
                await github.graphql(`
                mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $value: Float!) {
                  updateProjectV2ItemFieldValue(input: {
                    projectId: $projectId,
                    itemId: $itemId,
                    fieldId: $fieldId,
                    value: { number: $value }
                  }) {
                    projectV2Item {
                      id
                    }
                  }
                }`, { projectId, itemId, fieldId: progressFieldId, value: progressPercent });

                console.log("✅ Progress field updated.");

            }
